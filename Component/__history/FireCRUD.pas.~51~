unit FireCRUD;

interface

uses
   System.SysUtils,
   System.Classes,
   Data.DB,
   FireDAC.Comp.DataSet,
   FireDAC.Comp.Client,
   uGlobal;

type
   { todo: Classe do CRUD }
   TFireCRUD = class(TFDQuery)
   private
      { todo: Variáveis auxiliares da classe }
      FTypeCRUD: CRUD;
      FTable: string;
      FKey: integer;
      FSQL: string;
      { Private declarations }
   protected
      { Protected declarations }
   public
      constructor Create(AOwner: TComponent); override;
      procedure SetSQL;
      { Public declarations }
   published
      { todo: Propriedades do CRUD na IDE (Object Inspector) }
      property TypeCRUD: CRUD read FTypeCRUD write FTypeCRUD default tcNone;
      property TableCRUD: string read FTable write FTable;
      { Published declarations }
   end;

procedure Register;

implementation

procedure Register;
begin
   RegisterComponents('Training', [TFireCRUD]);
end;

{ TFireCRUD }

constructor TFireCRUD.Create(AOwner: TComponent);
begin
   inherited;
end;

procedure TFireCRUD.SetSQL;
var
   slFields: TStringList;
   strGetFieldNames: string;
   iFileds: integer;
begin
   strGetFieldNames := Format('SELECT * FROM %s ', [Self.TableCRUD]);
   Self.Open(strGetFieldNames);

   slFields := TStringList.Create;

   try
      Self.GetFieldNames(slFields);
      strGetFieldNames := slFields.Text;
      slFields.SaveToFile('GetFieldNames.txt');
   finally

   end;

   case FTypeCRUD of
      tcNone:
         begin
            FSQL := Format('SELECT * FROM %s ', [Self.TableCRUD]);
         end;
      tcInsert:
         begin

            FSQL := Format('INSERT INTO %s ', [Self.TableCRUD]);

            for iFileds :=1 to slFields.Count -1 do
            begin

            end;


         end;

      tcUpdate:
         begin
            FSQL := Format('UPDATE %s SET ', [Self.TableCRUD]);
         end;

      tcDelete:
         begin
            Format('DELETE FROM %s ', [Self.TableCRUD]);
         end;
   end;
   Self.SQL.Text := FSQL;
end;

end.
